# Info-Sec-Privacy

"""

This security layer inadequately handles A/B storage for files in RepyV2.




Note:

    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python

    Also you need to give it an application to run.

    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 

    

    """ 

TYPE="type"

ARGS="args"

RETURN="return"

EXCP="exceptions"

TARGET="target"

FUNC="func"

OBJC="objc"

lock = createlock()

class ABFile():

  def __init__(self,filename,create):
 
    # globals

    mycontext['debug'] = False   

    # local (per object) reference to the underlying file

    self.Afn = filename+'.a'

    self.Bfn = filename+'.b'

    # create is a Boolean (true or false) and will either create a new file or use the existing file
    # how can a bad guy lie or exploit the "create" variable?
    # is there anything you can do about that when you're writing your reference monitor?

    # our security policy is that the Afile should always start with a "S" and end with an "E"
    # if we're creating a new Afile, we need to write something to it that's valid
    # do we need to write something to the Bfile? MAYBE
  
    # make the files and add 'SE' to the readat file...
    lock.acquire(True)
    if create:
      #check if file exists
      if self.Afn in listfiles():
         self.Afile = openfile(self.Afn,create)
         self.Bfile = openfile(self.Bfn,create)
         self.Bfile.writeat(self.Afile.readat(None,0),0) #since Afile exists, write Afile contents to B
      else:
        self.Afile = openfile(self.Afn,create) #create new files and write valid content to A
        self.Bfile = openfile(self.Bfn,create)
        self.Afile.writeat('SE',0)
    else: #create is false so files exist
       if self.Afn in listfiles():
         self.Afile = openfile(self.Afn,True)
         self.Bfile = openfile(self.Bfn,True) 
         self.Bfile.writeat(self.Afile.readat(None,0),0) #write Afile contents to B
       else:
          return #no files found
  

  def writeat(self,data,offset):

       x = len(self.Bfile.readat(None, 0))


       if offset >= 0 and data[0]!=" " and offset<=x:

      #the requested data to the B file using the sandbox's writeat call
          self.Bfile.writeat(data, offset)


  def readat(self,bytes,offset):

    # Read from the A file using the sandbox's readat...

    return self.Afile.readat(bytes,offset)

  def close(self):
    b_length = len(self.Bfile.readat(None,0))
    a_length = len(self.Afile.readat(None,0))
    b_content = self.Bfile.readat(None,0)
    a_content = self.Afile.readat(None,0)
    self.Bfile.close()

    if a_length >= 1 and a_content[0] == 'S' and a_content[-1] == 'E' and b_length >= 1 and b_content[0] == 'S' and b_content[-1] == 'E': #check if contents meet parameters and are not empty
       self.Afile.writeat(b_content,0)
    self.Afile.close()
    lock.release()
    # stop additional changes to the file, determine if B is valid and if so, Clone B to A

    # what do we do if the B file is not valid? anything? nothing?
    # is it ok to close down the Bfile with invalid data? YES - perfectly fine to have invalid data in B

    # if I write SHOW to the Bfile. Close it down.
    # Then come back later and reopen it to write "ME" at the end.
    # The Afile should end up having "SHOWME" written to it.           
   

def ABopenfile(filename, create):

  return ABFile(filename,create)





# The code here sets up type checking and variable hiding for you.  You

# should not need to change anything below here.

sec_file_def = {"obj-type":ABFile,

                "name":"ABFile",

                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},

                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},

                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}

           }


CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}


# Execute the user code

secure_dispatch_module()
